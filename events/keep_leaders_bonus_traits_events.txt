namespace = keep_leaders_bonus_traits

# fired by on_ruler_back_to_pre_ruler_class
country_event = {
	id = keep_leaders_bonus_traits.19
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		exists = FROM
		FROM = {
			NOR = {
				has_leader_flag = former_ruler
				has_leader_flag = former_heir
			}
		}
	}
	immediate = {
		FROM = { add_former_ruler_trait = yes }
	}
}

# fired when this mod adds one of these traits to a leader, and by on_ruler_set and on_ruler_back_to_pre_ruler_class
# fired by keep_leaders_bonus_traits.21 which manually delays a day from leader firing/death in order to update
# after the game removes them from the leader pool
country_event = {
	id = keep_leaders_bonus_traits.20
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		should_recalculate_former_ruler_country_modifiers = yes
	}
	immediate = {
		set_update_modifiers_batch = begin
		if = {
			limit = { has_modifier = former_ruler_admin_bonus }
			remove_modifier = former_ruler_admin_bonus
		}
		if = {
			limit = { has_modifier = former_heir_admin_bonus }
			remove_modifier = former_heir_admin_bonus
		}
		if = {
			limit = { has_modifier = former_ruler_research_bonus }
			remove_modifier = former_ruler_research_bonus
		}
		if = {
			limit = { has_modifier = former_heir_research_bonus }
			remove_modifier = former_heir_research_bonus
		}
		if = {
			limit = { has_modifier = former_ruler_naval_bonus }
			remove_modifier = former_ruler_naval_bonus
		}
		if = {
			limit = { has_modifier = former_heir_naval_bonus }
			remove_modifier = former_heir_naval_bonus
		}

		set_variable = {
			which = former_ruler_accumulator_governor
			value = 0
		}
		set_variable = {
			which = former_heir_accumulator_governor
			value = 0
		}
		set_variable = {
			which = former_ruler_accumulator_scientist
			value = 0
		}
		set_variable = {
			which = former_heir_accumulator_scientist
			value = 0
		}
		set_variable = {
			which = former_ruler_accumulator_admiral
			value = 0
		}
		set_variable = {
			which = former_heir_accumulator_admiral
			value = 0
		}

		every_owned_leader = {
			if = {
				limit = {
					leader_class = governor
					OR = {
						has_trait = leader_trait_former_ruler_machine_intelligence_governor
						has_trait = leader_trait_former_ruler_hive_governor
						has_trait = leader_trait_former_ruler_governor
						has_trait = leader_trait_former_heir_governor
					}
				}
				if = {
					limit = { NOT = { has_trait = leader_trait_former_heir_governor } }
					PREV = {
						change_variable = {
							which = former_ruler_accumulator_governor
							value = 1
						}
					}
				}
				else = {
					PREV = {
						change_variable = {
							which = former_heir_accumulator_governor
							value = 1
						}
					}
				}
			}
			else_if = {
				limit = {
					leader_class = scientist
					OR = {
						has_trait = leader_trait_former_ruler_machine_intelligence_scientist
						has_trait = leader_trait_former_ruler_scientist
						has_trait = leader_trait_former_heir_scientist
					}
				}
				if = {
					limit = { NOT = { has_trait = leader_trait_former_heir_scientist } }
					PREV = {
						change_variable = {
							which = former_ruler_accumulator_scientist
							value = 1
						}
					}
				}
				else = {
					PREV = {
						change_variable = {
							which = former_heir_accumulator_scientist
							value = 1
						}
					}
				}
			}
			else_if = {
				limit = {
					leader_class = admiral
					OR = {
						has_trait = leader_trait_former_ruler_machine_intelligence_admiral
						has_trait = leader_trait_former_ruler_hive_admiral
						has_trait = leader_trait_former_ruler_admiral
						has_trait = leader_trait_former_heir_admiral
					}
				}
				if = {
					limit = { NOT = { has_trait = leader_trait_former_heir_admiral } }
					PREV = {
						change_variable = {
							which = former_ruler_accumulator_admiral
							value = 1
						}
					}
				}
				else = {
					PREV = {
						change_variable = {
							which = former_heir_accumulator_admiral
							value = 1
						}
					}
				}
			}
		}

		if = {
			limit = {
				check_variable = {
					which = former_ruler_accumulator_governor
					value > 0
				}
			}
			add_modifier = {
				modifier = former_ruler_admin_bonus
				multiplier = former_ruler_accumulator_governor
			}
		}

		if = {
			limit = {
				check_variable = {
					which = former_heir_accumulator_governor
					value > 0
				}
			}
			add_modifier = {
				modifier = former_heir_admin_bonus
				multiplier = former_heir_accumulator_governor
			}
		}

		if = {
			limit = {
				check_variable = {
					which = former_ruler_accumulator_scientist
					value > 0
				}
			}
			add_modifier = {
				modifier = former_ruler_research_bonus
				multiplier = former_ruler_accumulator_scientist
			}
		}

		if = {
			limit = {
				check_variable = {
					which = former_heir_accumulator_scientist
					value > 0
				}
			}
			add_modifier = {
				modifier = former_heir_research_bonus
				multiplier = former_heir_accumulator_scientist
			}
		}

		if = {
			limit = {
				check_variable = {
					which = former_ruler_accumulator_admiral
					value > 0
				}
			}
			add_modifier = {
				modifier = former_ruler_naval_bonus
				multiplier = former_ruler_accumulator_admiral
			}
		}

		if = {
			limit = {
				check_variable = {
					which = former_heir_accumulator_admiral
					value > 0
				}
			}
			add_modifier = {
				modifier = former_heir_naval_bonus
				multiplier = former_heir_accumulator_admiral
			}
		}

		clear_variable = former_ruler_accumulator_governor
		clear_variable = former_heir_accumulator_governor
		clear_variable = former_ruler_accumulator_scientist
		clear_variable = former_heir_accumulator_scientist
		clear_variable = former_ruler_accumulator_admiral
		clear_variable = former_heir_accumulator_admiral

		set_update_modifiers_batch = end
	}
}

# shim event in order to update country-level leader bonuses after the game removes them from the leader pool
# fired by on_leader_fired and on_leader_death 
country_event = {
	id = keep_leaders_bonus_traits.21
	is_triggered_only = yes
	hide_window = yes
	trigger = {
		should_recalculate_former_ruler_country_modifiers = yes
	}
	immediate = {
		country_event = {
			id = keep_leaders_bonus_traits.20
			days = 1
		}
	}
}