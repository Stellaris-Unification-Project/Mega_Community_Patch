
### Apocalypse Events

namespace = apoc

# on_entering_system is bugged in 2.1.1. Use apoc.2 by on_entering_system_fleet instead.
# Encountered Abandoned Gateway
ship_event = {
	id = apoc.1
	title = "apoc.1.name"
	desc = {
		text = apoc.1.desc
		trigger = {
			owner = {
				has_country_flag = encountered_inactive_gateway
				NOT = { has_country_flag = encountered_first_lgate }
			}
		}
	}
	desc = {
		text = apoc.1.b.desc
		trigger = {
			owner = {
				has_country_flag = encountered_inactive_gateway
				has_country_flag = encountered_first_lgate
			}
		}
	}
	desc = {
		text = "apoc.1.desc.alter"
		trigger = {
			owner = {
				has_country_flag = encountered_active_gateway
				NOT = { has_country_flag = encountered_first_lgate }
			}
		}

	}
	desc = {
		text = "apoc.1.b.desc.alter"
		trigger = {
			owner = {
				has_country_flag = encountered_active_gateway
				has_country_flag = encountered_first_lgate
			}
		}
	}
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	location = FROM
	
	is_triggered_only = yes
	
	trigger = {
		owner = {
			NOT = { has_country_flag = encountered_first_gateway }
		}
		FROM = {
			OR = {
				AND = {
					has_star_flag = abandoned_gateway
					any_system_megastructure = { is_megastructure_type = gateway_ruined }
				}
				any_system_megastructure = { is_megastructure_type = gateway_restored }
				any_system_megastructure = { is_megastructure_type = gateway_final }
			}
		}
	}
	
	immediate = {
		FROM = { save_event_target_as = gateway_system }
		owner = {
			set_country_flag = encountered_first_gateway
			add_seen_bypass_type = gateway
			if = {
				limit = {
					from = { any_system_megastructure = { is_megastructure_type = gateway_ruined } }
				}
				set_country_flag = encountered_inactive_gateway
			}
			else = {
				set_country_flag = encountered_active_gateway
			}
		}
	}	
	
	option = {
		name = INTRIGUING
		hidden_effect = {
			owner = {
				if = { 
					limit = { has_country_flag = encountered_inactive_gateway }
					remove_country_flag = encountered_inactive_gateway
				}
				if = { 
					limit = { has_country_flag = encountered_active_gateway }
					remove_country_flag = encountered_active_gateway
				}
			}
		}
	}
}
# triggered by on_entering_system_fleet
# Encountered Abandoned Gateway
fleet_event = {
	id = apoc.2
	title = "apoc.1.name"
	desc = {
		text = apoc.1.desc
		trigger = {
			owner = {
				has_country_flag = encountered_inactive_gateway
				NOT = { has_country_flag = encountered_first_lgate }
			}
		}
	}
	desc = {
		text = apoc.1.b.desc
		trigger = {
			owner = {
				has_country_flag = encountered_inactive_gateway
				has_country_flag = encountered_first_lgate
			}
		}
	}
	desc = {
		text = "apoc.1.desc.alter"
		trigger = {
			owner = {
				has_country_flag = encountered_active_gateway
				NOT = { has_country_flag = encountered_first_lgate }
			}
		}

	}
	desc = {
		text = "apoc.1.b.desc.alter"
		trigger = {
			owner = {
				has_country_flag = encountered_active_gateway
				has_country_flag = encountered_first_lgate
			}
		}
	}
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	location = FROM
	
	is_triggered_only = yes
	
	trigger = {
		owner = {
			NOT = { has_country_flag = encountered_first_gateway }
		}
		FROM = {
			OR = {
				AND = {
					has_star_flag = abandoned_gateway
					any_system_megastructure = { is_megastructure_type = gateway_ruined }
				}
				any_system_megastructure = { is_megastructure_type = gateway_restored }
				any_system_megastructure = { is_megastructure_type = gateway_final }
			}
		}
	}
	
	immediate = {
		FROM = { save_event_target_as = gateway_system }
		owner = {
			set_country_flag = encountered_first_gateway
			add_seen_bypass_type = gateway
			if = {
				limit = {
					from = { any_system_megastructure = { is_megastructure_type = gateway_ruined } }
				}
				set_country_flag = encountered_inactive_gateway
			}
			else = {
				set_country_flag = encountered_active_gateway
			}
		}
	}	
	
	option = {
		name = INTRIGUING
		hidden_effect = {
			owner = {
				if = { 
					limit = { has_country_flag = encountered_inactive_gateway }
					remove_country_flag = encountered_inactive_gateway
				}
				if = { 
					limit = { has_country_flag = encountered_active_gateway }
					remove_country_flag = encountered_active_gateway
				}
			}
		}
	}
}

# on_entering_system is bugged in 2.1.1. Use apoc.4 by on_entering_system_fleet instead.
# Encountered L-Gate
ship_event = {
	id = apoc.3
	title = "apoc.1.name"
	desc = {
		text = apoc.3.desc
		trigger = {
			NOT = { 
				owner = { has_country_flag = encountered_first_gateway }
			}
		}
	}
	desc = {
		text = apoc.3.b.desc
		trigger = {
			owner = { has_country_flag = encountered_first_gateway }
		}
	}
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	location = FROM
	
	is_triggered_only = yes
	
	trigger = {
		owner = {
			NOR = { 
				has_country_flag = encountered_first_lgate
				has_event_chain = "l_cluster_chain"
			}
		}
		FROM = {
			has_star_flag = lgate
			any_system_megastructure = { is_megastructure_type = lgate_base }
		}
	}
	
	immediate = {
		FROM = { save_event_target_as = gateway_system }
		owner = { set_country_flag = encountered_first_lgate }
	}	
	
	option = {
		name = INTRIGUING
		owner = {
			start_lcluster_chain = yes
		}
	}
}
# triggered by on_entering_system_fleet
# Encountered L-Gate
fleet_event = {
	id = apoc.4
	title = "apoc.1.name"
	desc = {
		text = apoc.3.desc
		trigger = {
			NOT = { 
				owner = { has_country_flag = encountered_first_gateway }
			}
		}
	}
	desc = {
		text = apoc.3.b.desc
		trigger = {
			owner = { has_country_flag = encountered_first_gateway }
		}
	}
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	location = FROM
	
	is_triggered_only = yes
	
	trigger = {
		owner = {
			NOR = { 
				has_country_flag = encountered_first_lgate
				has_event_chain = "l_cluster_chain"
			}
		}
		FROM = {
			has_star_flag = lgate
			any_system_megastructure = { is_megastructure_type = lgate_base }
		}
	}
	
	immediate = {
		FROM = { save_event_target_as = gateway_system }
		owner = { set_country_flag = encountered_first_lgate }
	}	
	
	option = {
		name = INTRIGUING
		owner = {
			start_lcluster_chain = yes
		}
	}
}

# on_entering_system is bugged in 2.1.1. Use apoc.6 by on_entering_system_fleet instead.
# Encountered Natural Wormhole
ship_event = {
	id = apoc.5
	title = apoc.5.name
	desc = "apoc.5.desc"
	picture = GFX_evt_wormhole
	show_sound = event_radio_chatter
	location = FROM
	
	is_triggered_only = yes
	
	trigger = {
		owner = {
			NOT = { has_country_flag = encountered_first_wormhole }
		}
		FROM = {
			has_natural_wormhole = yes
		}
	}
	
	immediate = {
		FROM = { save_event_target_as = wormhole_system }
		owner = {
			set_country_flag = encountered_first_wormhole
			add_seen_bypass_type = wormhole
		}
	}	
	
	option = {
		name = apoc.5.a
	}
}
# triggered by on_entering_system_fleet
# Encountered Natural Wormhole
fleet_event = {
	id = apoc.6
	title = apoc.5.name
	desc = "apoc.5.desc"
	picture = GFX_evt_wormhole
	show_sound = event_radio_chatter
	location = FROM
	
	is_triggered_only = yes
	
	trigger = {
		owner = {
			NOT = { has_country_flag = encountered_first_wormhole }
		}
		FROM = {
			has_natural_wormhole = yes
		}
	}
	
	immediate = {
		FROM = { save_event_target_as = wormhole_system }
		owner = {
			set_country_flag = encountered_first_wormhole
			add_seen_bypass_type = wormhole
		}
	}	
	
	option = {
		name = apoc.5.a
	}
}

# Ancient Gateway Reactivated
country_event = {
	id = apoc.10
	title = "apoc.10.name"
	desc = {
		text = apoc.10.desc.1
		trigger = {
			num_active_gateways = 2
			NOT = { has_country_flag = did_not_repair_gateway }
		}
	}
	desc = {
		text = apoc.10.desc.2
		trigger = {
			num_active_gateways > 2
			NOT = { has_country_flag = did_not_repair_gateway }
		}
	}
	desc = {
		text = apoc.10.desc.3
		trigger = {
			has_country_flag = did_not_repair_gateway
			has_technology = "tech_gateway_activation"
		}
	}
	desc = {
		text = apoc.10.desc.4
		trigger = {
			has_country_flag = did_not_repair_gateway
			NOT = { has_technology = "tech_gateway_activation" }
		}
	}
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	location = from
	
	is_triggered_only = yes

	trigger = {
		NOR = { 
			has_country_flag = gateway_reactivated
			has_country_flag = gateway_built
		}
	}
	
	immediate = {
		from = { save_event_target_as = gateway_system }
		set_country_flag = gateway_reactivated
	}

	after = {
		hidden_effect = {
			if = {
				limit = { has_country_flag = did_not_repair_gateway }
				remove_country_flag = did_not_repair_gateway
			}
		}
	}
	
	option = {
		name = EXCELLENT
		trigger = {
			NOT = { has_country_flag = did_not_repair_gateway }
		}
	}
	option = {
		name = INTERESTING
		trigger = {
			has_country_flag = did_not_repair_gateway
			has_technology = "tech_gateway_activation"
		}
	}
	option = {
		name = apoc.10.a
		trigger = {
			has_country_flag = did_not_repair_gateway
			NOT = { has_technology = "tech_gateway_activation" }
		}
		if = {
			limit = {
				NOT = { has_tech_option = tech_gateway_activation }
			}
			add_research_option = tech_gateway_activation
		}
	}
}

# New Gateway Constructed
country_event = {
	id = apoc.11
	title = "apoc.11.name"
	desc = "apoc.11.desc"
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	location = from
	
	is_triggered_only = yes

	trigger = {
		NOR = { 
			has_country_flag = gateway_reactivated
			has_country_flag = gateway_built
		}
	}
	
	immediate = {
		from = { save_event_target_as = gateway_system }
		set_country_flag = gateway_built
	}	
	
	option = {
		name = EXCELLENT
	}
}

# Additional Gateways Reactivated
country_event = {
	id = apoc.12
	title = "apoc.10.name"
	desc = "apoc.12.desc"
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	location = from
	
	is_triggered_only = yes

	trigger = {
		OR = {
			has_country_flag = gateway_reactivated
			has_country_flag = gateway_built
		}
	}
	
	immediate = {
		from = { save_event_target_as = gateway_system }
	}
	
	option = {
		name = EXCELLENT
	}
}

# Additional Gateways Constructed
country_event = {
	id = apoc.13
	title = "apoc.11.name"
	desc = "apoc.13.desc"
	picture = GFX_evt_drifting_gateway
	show_sound = event_radio_chatter
	location = from
	
	is_triggered_only = yes

	trigger = {
		OR = {
			has_country_flag = gateway_reactivated
			has_country_flag = gateway_built
		}
	}
	
	immediate = {
		from = { save_event_target_as = gateway_system }
	}
	
	option = {
		name = EXCELLENT
	}
}

# Gateway Construction Site Finished
country_event = {
	id = apoc.14
	title = "apoc.14.name"
	desc = "apoc.14.desc"
	picture = GFX_evt_megastructure_construction
	show_sound = event_radio_chatter
	location = from
	
	is_triggered_only = yes
	
	immediate = {
		from = { save_event_target_as = gateway_system }
	}
	
	option = {
		name = GOOD
	}
}

country_event = {
	id = apoc.101
	hide_window = yes

	trigger = { always = no }

	immediate = {
		give_technology = {
			tech = tech_destroyers
			message = no
		}
		give_technology = {
			tech = tech_cruisers
			message = no
		}
		give_technology = {
			tech = tech_battleships
			message = no
		}
		give_technology = {
			tech = tech_titans
			message = no
		}
	}
}

# Colossus Project
country_event = {
	id = apoc.100
	title = "apoc.100.name"
	desc = {
		text = apoc.100.desc.purif
		trigger = {
			has_valid_civic = civic_fanatic_purifiers
		}
	}
	desc = {
		text = apoc.100.desc.termi
		trigger = {
			has_valid_civic = civic_machine_terminator
		}
	}
	desc = {
		text = apoc.100.desc.pacif
		trigger = {
			is_pacifist = yes
		}
	}
	desc = {
		text = apoc.100.desc.milit
		trigger = {
			is_militarist = yes
		}
	}
	desc = {
		text = apoc.100.desc.phobe
		trigger = {
			is_xenophobe = yes
		}
	}
	desc = {
		text = apoc.100.desc
		trigger = {
			NOR = {
				is_pacifist = yes
				is_militarist = yes
				is_xenophobe = yes
				has_valid_civic = civic_machine_terminator
				has_valid_civic = civic_hive_devouring_swarm
			}
		}
	}
	picture = GFX_evt_megastructure_construction
	show_sound = event_radio_chatter
	location = capital_scope

	is_triggered_only = yes

	option = {
		name = apoc.100.a
		# planet/owner project, best start in country scope, instead of location scope
		enable_special_project = {
			name = "COLOSSUS_PROJECT"
			location = capital_scope
			owner = root
		}
	}
}

# Choose Planet-Killer Weapon on 50% project progress
country_event = {
	id = apoc.110
	title = apoc.110.name
	desc = {
		text = apoc.110.desc
		trigger = { NOT = { has_ethic = ethic_gestalt_consciousness } }
	}
	desc = {
		text = apoc.110.desc.machine
		trigger = { has_authority = auth_machine_intelligence }
	}
	desc = {
		text = apoc.110.desc.hive
		trigger = { has_authority = auth_hive_mind }
	}
	picture = GFX_evt_planet_beam
	show_sound = event_radio_chatter
	location = capital_scope

	is_triggered_only = yes

	option = {
		name = PLANET_KILLER_CRACKER
		custom_tooltip = apoc.110.cracker.tooltip
		hidden_effect = {
			set_country_flag = pk_cracker
		}

		trigger = {
			is_pacifist = no
		}
	}

	option = {
		name = PLANET_KILLER_SHIELDER
		custom_tooltip = apoc.110.shielder.tooltip
		hidden_effect = {
			set_country_flag = pk_shielder
		}

		trigger = {
			is_pacifist = yes
		}
	}

	option = {
		name = PLANET_KILLER_NEUTRON
		custom_tooltip = apoc.110.neutron.tooltip
		hidden_effect = {
			set_country_flag = pk_neutron
		}

		trigger = {
			is_pacifist = no
			# Available to spiritualists if Divine Enforcer is locked out
			OR = {
				is_spiritualist = no
				NOR = {	
					AND = {
						NOT = { host_has_dlc = "Utopia" }
						has_technology = tech_telepathy
					}
					AND = {
						host_has_dlc = "Utopia"
						has_ascension_perk = ap_mind_over_matter
					}
				}					
			}	
		}
	}

	option = {
		name = PLANET_KILLER_GODRAY
		custom_tooltip = apoc.110.godray.tooltip
		hidden_effect = {
			set_country_flag = pk_godray
		}

		trigger = {
			is_spiritualist = yes
			OR = {
				AND = {
					NOT = { host_has_dlc = "Utopia" }
					has_technology = tech_telepathy
				}
				AND = {
					host_has_dlc = "Utopia"
					has_ascension_perk = ap_mind_over_matter
				}
			}
		}
	}

	option = {
		name = PLANET_KILLER_NANOBOTS
		custom_tooltip = apoc.110.nanobots.tooltip
		hidden_effect = {
			set_country_flag = pk_nanobots
		}

		trigger = {
			hidden_trigger = { has_ethic = ethic_gestalt_consciousness }
			has_valid_civic = civic_machine_assimilator
		}
	}
}

# Get Colossus and weapon tech on project completion
country_event = {
	id = apoc.120
	title = apoc.120.name
	desc = {
		text = apoc.120.desc
		trigger = { NOT = { has_ethic = ethic_gestalt_consciousness } }
	}
	desc = {
		text = apoc.120.desc.machine
		trigger = { has_authority = auth_machine_intelligence }
	}
	desc = {
		text = apoc.120.desc.hive
		trigger = { has_authority = auth_hive_mind }
	}
	picture = GFX_evt_megastructure_construction
	show_sound = event_radio_chatter
	location = capital_scope

	is_triggered_only = yes

	option = {
		name = OK
		set_country_flag = colossus_project
		give_technology = {
			tech = tech_colossus
			message = no
		}
		if = {
			limit = { has_country_flag = pk_cracker }
			give_technology = { tech = tech_pk_cracker message = no }
		}
		if = {
			limit = { has_country_flag = pk_shielder }
			give_technology = { tech = tech_pk_shielder message = no }
		}
		if = {
			limit = { has_country_flag = pk_neutron }
			give_technology = { tech = tech_pk_neutron message = no }
		}
		if = {
			limit = { has_country_flag = pk_godray }
			give_technology = { tech = tech_pk_godray message = no }
		}
		if = {
			limit = { has_country_flag = pk_nanobots }
			give_technology = { tech = tech_pk_nanobots message = no }
		}
		# fallback
		if = {
			limit = { 
				NOR = {
					has_country_flag = pk_cracker 
					has_country_flag = pk_shielder
					has_country_flag = pk_neutron
					has_country_flag = pk_godray
					has_country_flag = pk_nanobots
				}
			}
			give_technology = { tech = tech_pk_cracker message = no }
		}		
		hidden_effect = {
			every_playable_country = {
				limit = {
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = apoc.130 } # colossus researched notification
			}
		}
	}
}

country_event = {
	id = apoc.130
	title = apoc.130.name
	desc = apoc.130.desc
	picture = GFX_evt_planet_beam
	show_sound = event_radio_chatter
	location = from.capital_scope

	is_triggered_only = yes

	option = {
		name = apoc.130.a.weaker
		trigger = {
			is_pacifist = no
			relative_power = {
				who = from
				category = all
				value > inferior
			}
		}
	}

	option = {
		name = apoc.130.a.stronger
		trigger = {
			is_pacifist = no
			relative_power = {
				who = from
				category = all
				value < equivalent
			}
		}
	}

	option = {
		name = apoc.130.a.pacif
		trigger = {
			is_pacifist = yes
		}
	}
}

country_event = {
	id = apoc.199
	hide_window = yes

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				any_planet_within_border = {
					is_planet_class = pc_gaia
					is_colony = no
					has_modifier = "holy_planet"
					NOT = { has_colony_progress > 0 }
				}
			}
			random_planet_within_border = {
				limit = {
					is_planet_class = pc_gaia
					is_colony = no
					has_modifier = "holy_planet"
					NOT = { has_colony_progress > 0 }
				}
				save_event_target_as = holy_target
			}
			country_event = { id = apoc.200 }
		}
		else_if = {
			limit = {
				any_planet_within_border = {
					is_planet_class = pc_gaia
					is_colony = no
					NOR = {
						has_modifier = "holy_planet"
						has_colony_progress > 0
					}
				}
			}
			random_planet_within_border = {
				limit = {
					is_planet_class = pc_gaia
					is_colony = no
					NOR = {
						has_modifier = "holy_planet"
						has_colony_progress > 0
					}
				}
				save_event_target_as = holy_target
			}
			country_event = { id = apoc.200 }
		}
		else = { country_event = { id = apoc.201 } }
	}
}

# Make World Holy
country_event = {
	id = apoc.200
	title = apoc.200.name
	desc = apoc.200.desc
	picture = GFX_evt_unity_symbol
	show_sound = event_mystic_reveal
	location = event_target:holy_target

	is_triggered_only = yes

	immediate = {
		if = {
			limit = {
				event_target:holy_target = {
					has_modifier = holy_planet
				}
				any_country = {
					is_country_type = fallen_empire
					has_ai_personality_behaviour = holy_planets
				}
			}
			random_country = {
				limit = {
					is_country_type = fallen_empire
					has_ai_personality_behaviour = holy_planets
				}
				save_event_target_as = holy_world_respectee
			}
			set_country_flag = respects_holy_world_flag
		}
	}

	option = { # respects holy world also
		trigger = { has_country_flag = respects_holy_world_flag }
		name = apoc.200.a
		add_modifier = {
			modifier = has_holy_player_planet
			days = -1
		}
		event_target:holy_target = {
			custom_tooltip = apoc.200.a.tooltip 
			hidden_effect = {
				add_modifier = {
					modifier = holy_player_planet
					days = -1
				}
				set_planet_flag = holy_player_planet@root
			}
		}
		event_target:holy_world_respectee = {
			add_opinion_modifier = {
				who = root
				modifier = opinion_worships_our_holy_world
			}
		}
	}

	option = { # hallow this world
		trigger = { NOT = { has_country_flag = respects_holy_world_flag } }
		name = apoc.200.a
		add_modifier = {
			modifier = has_holy_player_planet
			days = -1
		}
		event_target:holy_target = {
			custom_tooltip = apoc.200.a.tooltip 
			hidden_effect = {
				add_modifier = {
					modifier = holy_player_planet
					days = -1
				}
				set_planet_flag = holy_player_planet@root
			}
		}
	}
	
	after = {
		hidden_effect = {
			remove_country_flag = search_for_holy_world
		}
	}
}

# Did not find a world to make holy
country_event = {
	id = apoc.201
	title = apoc.201.name
	desc = apoc.201.desc
	picture = GFX_evt_throne_room
	location = capital_scope

	is_triggered_only = yes

	option = {
		name = UNFORTUNATE
		custom_tooltip = apoc.201.a.tooltip
		hidden_effect = {
			add_resource = { influence = 300 }
		}
	}
	
	after = {
		hidden_effect = {
			remove_country_flag = search_for_holy_world
		}
	}
}

# Lost holy world
# fired by on_planet_transfer and on_colonization_started
# planet_transfer might not work because:
# a) planet is not technically owned
# b) old owner is not retained;
# let us hope it is fired early before ownership updated?
# TODO TEMP [DM] revisit and get coder confirmation on this
# ideally we want an "on system/starbase ownership flipped" on-action
# -- Let it be called by on_colonization_started only. 
# -- Case of system transfer is handled by apoc.204.
planet_event = {
	id = apoc.202
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		has_modifier = holy_player_planet
	}

	immediate = {
		remove_modifier = holy_player_planet
		remove_planet_flag = holy_player_planet@space_owner
		space_owner = { remove_modifier = has_holy_player_planet }
		if = {
			limit = {
				any_country = {
					has_opinion_modifier = {
						who = root.space_owner
						modifier = opinion_worships_our_holy_world
					}
				}
			}
			random_country = {
				limit = {
					has_opinion_modifier = {
						who = root.space_owner
						modifier = opinion_worships_our_holy_world
					}
				}
				remove_opinion_modifier = {
					who = root.space_owner
					modifier = opinion_worships_our_holy_world
				}
			}
		}
	}
}

#convert flag for legacy
country_event = {
	id = apoc.203
	hide_window = yes
	
	fire_only_once = yes
	
	trigger = {
		NOT = { has_global_flag = holy_player_planet_flag_converted }
		is_country_type = global_event
	}
	
	immediate = {
		every_playable_country = {
			limit = {
				has_modifier = has_holy_player_planet
				any_planet_within_border = {
					has_modifier = holy_player_planet
				}
			}
			random_planet_within_border = {
				limit = {
					has_modifier = holy_player_planet
				}
				set_planet_flag = holy_player_planet@prev
			}
		}
		set_global_flag = holy_player_planet_flag_converted
	}
}

# called by on_starbase_transfer, this = starbase, from = former owner
ship_event = {
	id = apoc.204
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		solar_system = {
			any_system_planet = {
				has_modifier = holy_player_planet
				has_planet_flag = holy_player_planet@from
			}
		}
	}
	immediate = {
		solar_system = {
			random_system_planet = {
				limit = {
					has_modifier = holy_player_planet
					has_planet_flag = holy_player_planet@from
				}
				remove_modifier = holy_player_planet
				remove_planet_flag = holy_player_planet@from
			}
		}
		from = {
			remove_modifier = has_holy_player_planet
			random_country = {
				limit = {
					has_opinion_modifier = {
						who = prev
						modifier = opinion_worships_our_holy_world
					}
				}
				remove_opinion_modifier = {
					who = prev
					modifier = opinion_worships_our_holy_world
				}
			}
		}
	}
}

# Gain Gateway flag on researching tech
country_event = {
	id = apoc.300
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		last_increased_tech = "tech_gateway_activation"
	}

	immediate = {
		set_country_flag = encountered_first_gateway
	}
}

# Fix for savegames
event = {
	id = apoc.301
	hide_window = yes

	is_triggered_only = yes

	trigger = {
		any_playable_country = {
			has_technology = "tech_gateway_activation"
			NOT = { has_country_flag = encountered_first_gateway }
		}
	}

	immediate = {
		random_playable_country = {
			limit = {
				has_technology = "tech_gateway_activation"
				NOT = { has_country_flag = encountered_first_gateway }
			}
			set_country_flag = encountered_first_gateway
		}
	}
}