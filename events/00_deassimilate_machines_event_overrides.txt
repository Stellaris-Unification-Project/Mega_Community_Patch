namespace = action
namespace = utopia

# Assimilate Pops on Yearly Pulse
event = {
	id = action.64
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_playable_country = {
			num_unique_species > 1
			any_owned_pop_species = {
				has_citizenship_type = {
					type = citizenship_assimilation
					country = PREV
				}
			}
		}
	}
	immediate = {
		log = "action.64"
		set_update_modifiers_batch = begin
        every_playable_country = {
            limit = {
                num_unique_species > 1
                any_owned_pop_species = {
                    has_citizenship_type = {
						type = citizenship_assimilation
						country = PREV
                    }
                }
            }
			save_event_target_as = assimilating_country
			log = "action.64.epc: [assimilating_country.GetRealName]"
			every_owned_pop_species = {
				limit = {
					has_citizenship_type = {
						type = citizenship_assimilation
						country = PREV
					}
				}
				log = "action.64.eops: [This.GetName]"
				if = { # deassimilate machines
					limit = { is_eligible_for_deassimilation_machine_species = yes }
					prepare_machine_species_to_mechanical_species = yes
				}
				else_if = { # assimilator empire or cyborg empire
					limit = {
						prev = {
							OR = {
								AND = {
									has_country_flag = flesh_weakened
									NOT = { has_country_flag = synthetic_empire }
								}
								AND = {
									has_authority = auth_machine_intelligence
									has_valid_civic = civic_machine_assimilator
								}
							}
						}
					}
					if = {
						limit = { NOT = { has_trait = trait_cybernetic } }
						if = {
							limit = {
								has_trait = trait_hive_mind
								has_trait = trait_self_modified
							}
							modify_species = {
								species = this
								add_trait = trait_cybernetic
								add_traits_at_start_of_list = yes
								remove_trait = trait_hive_mind
								remove_trait = trait_self_modified
								change_scoped_species = no

								effect = {
									set_timed_species_flag = {
										flag = assimilation_species_of_species@prev
										days = 30
									}
									set_timed_species_flag = {
										flag = assimilation_species_of_empire@prevprev
										days = 30
									}
								}
							}
						}
						else_if = {
							limit = {
								has_trait = trait_hive_mind
							}
							modify_species = {
								species = this
								add_trait = trait_cybernetic
								add_traits_at_start_of_list = yes
								remove_trait = trait_hive_mind
								change_scoped_species = no

								effect = {
									set_timed_species_flag = {
										flag = assimilation_species_of_species@prev
										days = 30
									}
									set_timed_species_flag = {
										flag = assimilation_species_of_empire@prevprev
										days = 30
									}
								}
							}
						}
						else_if = {
							limit = {
								has_trait = trait_self_modified
							}
							modify_species = {
								species = this
								add_trait = trait_cybernetic
								add_traits_at_start_of_list = yes
								remove_trait = trait_self_modified
								change_scoped_species = no

								effect = {
									set_timed_species_flag = {
										flag = assimilation_species_of_species@prev
										days = 30
									}
									set_timed_species_flag = {
										flag = assimilation_species_of_empire@prevprev
										days = 30
									}
								}
							}
						}
						else = {
							modify_species = {
								species = this
								add_trait = trait_cybernetic
								add_traits_at_start_of_list = yes
								change_scoped_species = no

								effect = {
									set_timed_species_flag = {
										flag = assimilation_species_of_species@prev
										days = 30
									}
									set_timed_species_flag = {
										flag = assimilation_species_of_empire@prevprev
										days = 30
									}
								}
							}
						}
					}
				}
				else_if = { # hive mind
					limit = {
						prev = {
							has_authority = auth_hive_mind
							NOT = { has_civic = civic_hive_devouring_swarm }
						}
					}
					if = {
						limit = {
							has_trait = trait_self_modified
						}
						modify_species = {
							species = this
							add_trait = trait_hive_mind
							remove_trait = trait_self_modified
							change_scoped_species = no

							effect = {
								set_timed_species_flag = {
									flag = assimilation_species_of_species@prev
									days = 30
								}
								set_timed_species_flag = {
									flag = assimilation_species_of_empire@prevprev
									days = 30
								}
							}
						}
					}
					else = {
						modify_species = {
							species = this
							add_trait = trait_hive_mind
							change_scoped_species = no

							effect = {
								set_timed_species_flag = {
									flag = assimilation_species_of_species@prev
									days = 30
								}
								set_timed_species_flag = {
									flag = assimilation_species_of_empire@prevprev
									days = 30
								}
							}
						}
					}
				}
				else_if = {
					limit = {
						prev = {
							NOR = {
								has_ethic = ethic_gestalt_consciousness
								has_country_flag = synthetic_empire
								has_country_flag = flesh_weakened
							}
						}
						has_trait = trait_hive_mind
					}
					modify_species = {
						species = this
						remove_trait = trait_hive_mind
						change_scoped_species = no

						effect = {
							set_timed_species_flag = {
								flag = assimilation_species_of_species@prev
								days = 30
							}
							set_timed_species_flag = {
								flag = assimilation_species_of_empire@prevprev
								days = 30
							}
						}
					}
				}
				else_if = { #### Psionic Assimilation ADD OTHER RANDOM OPTIONS TOO
					limit = {
						prev = {
							has_ascension_perk = ap_transcendence
						}
					}
					if = {
						limit = {
							NOR = {
								has_trait = trait_psionic
								has_trait = trait_latent_psionic
							}
						}
						modify_species = {
							species = this
							add_trait = trait_psionic
							add_traits_at_start_of_list = yes
							change_scoped_species = no

							effect = {
								set_timed_species_flag = {
									flag = assimilation_species_of_species@prev
									days = 30
								}
								set_timed_species_flag = {
									flag = assimilation_species_of_empire@prevprev
									days = 30
								}
							}
						}
					}
					else_if = {
						limit = {
							NOT = { has_trait = trait_psionic}
							has_trait = trait_latent_psionic
						}
						modify_species = {
							species = this
							remove_trait = trait_latent_psionic
							add_trait = trait_psionic
							add_traits_at_start_of_list = yes
							change_scoped_species = no

							effect = {
								set_timed_species_flag = {
									flag = assimilation_species_of_species@prev
									days = 30
								}
								set_timed_species_flag = {
									flag = assimilation_species_of_empire@prevprev
									days = 30
								}
							}
						}
					}
				}
			}
            every_owned_planet = {
				log = "action.64.eop: [This.GetName]"
                planet_event = { id = action.65 }
            }
        }
		set_update_modifiers_batch = end
    }
}

# Assimilate Pops
planet_event = {
	id = action.65
	hide_window = yes
	is_triggered_only = yes
	trigger = {
		any_owned_pop = {
			has_citizenship_type = {
				type = citizenship_assimilation
				country = ROOT.owner
			}
		}
	}
	immediate = {
		log = "action.65: [This.GetName]"
		random_list = {
			1 = { # 3 pops
				set_variable = {
					which = assimilation_maximum
					value = 3
				}
			}
			1 = { # 6 pops
				set_variable = {
					which = assimilation_maximum
					value = 6
				}
			}
			1 = { # 12 pops
				set_variable = {
					which = assimilation_maximum
					value = 12
				}
			}
		}
		set_variable = {
			which = assimilation_counter
			value = assimilation_maximum
		}
		while = {
			count = assimilation_maximum
			limit = {
				any_owned_pop = {
					has_citizenship_type = {
						type = citizenship_assimilation
						country = ROOT.owner
					}
				}
				check_variable = {
					which = assimilation_counter
					value > 0
				}
			}
			assimilation_effect = yes
		}
		clear_variable = assimilation_counter
		clear_variable = assimilation_maximum
	}
}

# overridden to not convert already-existing synthetics into the changed species
# The Synthetic Age
country_event = {
	id = utopia.2551
	title = "utopia.2551.name"
	desc = "utopia.2551.desc"
	picture = GFX_evt_robot_assembly_plant
	show_sound = event_synthetic_evolution

	is_triggered_only = yes

	immediate = {
		set_country_flag = synthetic_empire

		if = {
			limit = { has_policy_flag = robots_outlawed }
			set_policy = {
				policy = robot_pop_policy
				option = robot_pops_allowed
				cooldown = yes
			}
		}
		if = {
			limit = {
				OR = {
					has_policy_flag = ai_servitude
					has_policy_flag = ai_outlawed
				}
			}
			set_policy = {
				policy = artificial_intelligence_policy
				option = ai_full_rights
				cooldown = yes
			}
		}
		if = {
			limit = {
				OR = {
					is_active_resolution = "resolution_divinity_silence_the_soulless"
					is_active_resolution = "resolution_divinity_a_defined_purpose"
				}
			}
			owner = {
				set_timed_country_flag = { flag = resolution_breached_synthetic_evolution days = 3600 }
			}
		}

		give_technology = { tech = tech_bio_reactor message = no }

		create_species = {
			is_mod = yes
			name = this
			namelist = this
			plural = this
			class = "ROBOT"
			portrait = "default_robot"
			traits = {
				trait = "trait_mechanical"
			}

			effect = {
				if = { limit = { host_has_dlc = "Synthetic Dawn Story Pack" }
					prev = {
						switch = {
							trigger = is_species_class
							HUM = { prev = { change_species_characteristics = { portrait = "sd_hum_robot" } } }
							MAM = { prev = { change_species_characteristics = { portrait = "sd_mam_robot" } } }
							REP = { prev = { change_species_characteristics = { portrait = "sd_rep_robot" } } }
							AVI = { prev = { change_species_characteristics = { portrait = "sd_avi_robot" } } }
							ART = { prev = { change_species_characteristics = { portrait = "sd_art_robot" } } }
							MOL = { prev = { change_species_characteristics = { portrait = "sd_mol_robot" } } }
							FUN = { prev = { change_species_characteristics = { portrait = "sd_fun_robot" } } }
							PLANT = { prev = { change_species_characteristics = { portrait = "sd_pla_robot" } } }
							LITHOID = { prev = { change_species_characteristics = { portrait = "lith_machine" } } }
							NECROID = { prev = { change_species_characteristics = { portrait = "nec_machine" } } }
							AQUATIC = { prev = { change_species_characteristics = { portrait = "aqu_machine" } } }
						}
					}
				}

				rename_species = {
					prompt_country = root #If targeted country is a player they will get a popup asking for a name/plural/adjective combo. Otherwise the species will get a random name from the specified name_list
					name_list = ascension_list
				}

				save_event_target_as = new_robotic_species
			}
		}
		every_owned_pop = {
			limit = {
				species = {
					has_trait = trait_cybernetic
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				species = {
					has_trait = trait_cybernetic
				}
			}
			change_species = event_target:new_robotic_species
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = assault_army
			}
			modify_army = {
				name = random
				type = "robotic_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_army = {
			limit = {
				exists = species
				exists = planet
				species = {
					has_trait = trait_cybernetic
				}
				army_type = defense_army
			}
			modify_army = {
				name = random
				type = "robotic_defense_army"
				species = event_target:new_robotic_species
			}
		}

		every_owned_leader = {
			limit = {
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		every_pool_leader = {
			limit = {
				OR = {
					has_trait = leader_trait_admiral_cyborg
					has_trait = leader_trait_general_cyborg
					has_trait = leader_trait_governor_cyborg
					has_trait = leader_trait_scientist_cyborg
					has_trait = leader_trait_ruler_cyborg
				}
			}
			change_species = event_target:new_robotic_species
			change_leader_portrait = species
		}
		change_dominant_species = { species = event_target:new_robotic_species }

		every_owned_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			switch = {
				trigger = leader_class
				admiral = {
					add_trait = leader_trait_admiral_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_admiral_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				general = {
					add_trait = leader_trait_general_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_general_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				governor = {
					add_trait = leader_trait_governor_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_governor_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				scientist = {
					add_trait = leader_trait_scientist_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_scientist_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				ruler = {
					add_trait = leader_trait_ruler_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_ruler_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
			}
		}
		every_pool_leader = {
			limit = {
				species = { has_trait = trait_mechanical }
				NOR = {
					has_trait = leader_trait_admiral_synthetic
					has_trait = leader_trait_general_synthetic
					has_trait = leader_trait_governor_synthetic
					has_trait = leader_trait_scientist_synthetic
					has_trait = leader_trait_ruler_synthetic
				}
			}
			switch = {
				trigger = leader_class
				admiral = {
					add_trait = leader_trait_admiral_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_admiral_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				general = {
					add_trait = leader_trait_general_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_general_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				governor = {
					add_trait = leader_trait_governor_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_governor_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				scientist = {
					add_trait = leader_trait_scientist_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_scientist_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
				ruler = {
					add_trait = leader_trait_ruler_synthetic
					add_ruler_trait = leader_trait_ruler_synthetic
					remove_trait = leader_trait_ruler_cyborg
					remove_ruler_trait = leader_trait_ruler_cyborg
				}
			}
		}

		observer_event = { id = observer.4 }
		every_playable_country = {
			limit = {
				is_ai = no
				NOT = { is_same_value = root }
				has_communications = root
			}
			country_event = { id = utopia.2555 days = 5 }
			country_event = { id = utopia.2556 days = 10 }
		}
		if = {
			limit = {
				any_country = {
					
						is_fallen_empire = yes
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
			}
			random_country = {
				limit = {
					
						is_fallen_empire = yes
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}
		else = {
			random_playable_country = {
				limit = {
					is_country_type = default
					has_ethic = ethic_fanatic_spiritualist
					has_communications = root
					NOT = { is_same_value = root }
				}
				country_event = { id = utopia.2557 days = 15 }
			}
		}

		ROOT = {
			set_country_flag = synthetic_age
		}
	}

	option = {
		name = "utopia.2551.a"
		custom_tooltip = SYNTH_ASSIMILATION_CITIZENSHIP_ENABLED
	}
}